---
kind: pipeline
type: kubernetes
name: default

steps:
  - name: restore
    image: plugins/s3-cache
    settings:
      pull: true
      endpoint:
        from_secret: s3_cache_endpoint
      access_key:
        from_secret: s3_access_key
      secret_key:
        from_secret: s3_secret_key
      root:
        from_secret: s3_bucket
      restore: true
      filename: cache.tar.gz # Use compression

  - name: compile-scala
    image: danieletorelli/sbt-alpine:15-slim
    commands:
      - sbt -Duser.home=. -Dsbt.global.base=.sbt -Dsbt.boot.directory=.sbt -Dsbt.ivy.home=.ivy2 ";compile"
    depends_on:
      - restore

  - name: build-scala
    image: danieletorelli/sbt-alpine:15-slim
    commands:
      - sbt -Duser.home=. -Dsbt.global.base=.sbt -Dsbt.boot.directory=.sbt -Dsbt.ivy.home=.ivy2 ";assembly"
    depends_on:
      - compile-scala

  - name: compile-js
    image: danieletorelli/sbt-alpine:15-slim
    commands:
      - sbt -Duser.home=. -Dsbt.global.base=.sbt -Dsbt.boot.directory=.sbt -Dsbt.ivy.home=.ivy2 ";frontend/fullOptJS"
    depends_on:
      - compile-scala

  - name: build-js
    image: node:current-alpine
    commands:
      - cd frontend
      - yarn install
      - CI=false yarn run build
    depends_on:
      - compile-js

  - name: rebuild
    image: plugins/s3-cache
    settings:
      pull: true
      endpoint:
        from_secret: s3_cache_endpoint
      access_key:
        from_secret: s3_access_key
      secret_key:
        from_secret: s3_secret_key
      root:
        from_secret: s3_bucket
      rebuild: true
      filename: cache.tar.gz # Use compression
      mount:
        - frontend/node_modules
        - .sbt
        - .cache
        - .ivy2/cache
        - backend/target
        - frontend/target
        - common/.js
        - common/.jvm
        - project/target
    when:
      event: push
    depends_on:
      - build-js
      - build-scala

  - name: push-frontend
    image: docker:dind
    environment:
      DOCKER_USER:
        from_secret: ghcr_login
      DOCKER_PASSWORD:
        from_secret: ghcr_password
    volumes:
      - name: dockersock
        path: /var/run/
    commands:
      - export SANITIZED_DRONE_COMMIT_BRANCH=$(echo ${DRONE_COMMIT_BRANCH} | sed 's#/#-#g')
      - export COMMIT_SHA=${DRONE_COMMIT_SHA:0:7}
      - cd frontend
      - docker build -t ghcr.io/greg2010/athena-frontend .
      - docker tag ghcr.io/greg2010/athena-frontend ghcr.io/greg2010/athena-frontend:$SANITIZED_DRONE_COMMIT_BRANCH\_$COMMIT_SHA
      - docker tag ghcr.io/greg2010/athena-frontend ghcr.io/greg2010/athena-frontend:$SANITIZED_DRONE_COMMIT_BRANCH\_latest
      - docker tag ghcr.io/greg2010/athena-frontend ghcr.io/greg2010/athena-frontend:latest
      - docker login ghcr.io -u $DOCKER_USER -p $DOCKER_PASSWORD
      - docker push ghcr.io/greg2010/athena-frontend:$SANITIZED_DRONE_COMMIT_BRANCH\_$COMMIT_SHA
      - docker push ghcr.io/greg2010/athena-frontend:$SANITIZED_DRONE_COMMIT_BRANCH\_latest
      - docker push ghcr.io/greg2010/athena-frontend:latest
    depends_on:
      - build-js
      - build-scala

  - name: push-backend
    image: docker:dind
    environment:
      DOCKER_USER:
        from_secret: ghcr_login
      DOCKER_PASSWORD:
        from_secret: ghcr_password
    volumes:
      - name: dockersock
        path: /var/run/
    commands:
      - export SANITIZED_DRONE_COMMIT_BRANCH=$(echo ${DRONE_COMMIT_BRANCH} | sed 's#/#-#g')
      - export COMMIT_SHA=${DRONE_COMMIT_SHA:0:7}
      - cd backend
      - docker build -t ghcr.io/greg2010/athena-backend .
      - docker tag ghcr.io/greg2010/athena-backend ghcr.io/greg2010/athena-backend:$SANITIZED_DRONE_COMMIT_BRANCH\_$COMMIT_SHA
      - docker tag ghcr.io/greg2010/athena-backend ghcr.io/greg2010/athena-backend:$SANITIZED_DRONE_COMMIT_BRANCH\_latest
      - docker tag ghcr.io/greg2010/athena-backend ghcr.io/greg2010/athena-backend:latest
      - docker login ghcr.io -u $DOCKER_USER -p $DOCKER_PASSWORD
      - docker push ghcr.io/greg2010/athena-backend:$SANITIZED_DRONE_COMMIT_BRANCH\_$COMMIT_SHA
      - docker push ghcr.io/greg2010/athena-backend:$SANITIZED_DRONE_COMMIT_BRANCH\_latest
      - docker push ghcr.io/greg2010/athena-backend:latest
    depends_on:
      - build-scala

  - name: flush
    image: plugins/s3-cache
    settings:
      pull: true
      endpoint:
        from_secret: s3_cache_endpoint
      access_key:
        from_secret: s3_access_key
      secret_key:
        from_secret: s3_secret_key
      root:
        from_secret: s3_bucket
      flush: true
      filename: cache.tar.gz # Use compression
      flush_age: 14
    depends_on:
      - rebuild

  - name: discord-notify
    image: appleboy/drone-discord
    settings:
      webhook_id:
        from_secret: discord_webhook_id
      webhook_token:
        from_secret: discord_webhook_token
    depends_on:
      - push-frontend
      - push-backend
    when:
      status:
        - failure
        - success

volumes:
  - name: dockersock
    host:
      path: /var/run/
---
kind: signature
hmac: 9f4481c569b4ce38bfbb0f9d5f910a27623df6932e6aa9693cca2a32a19aca32